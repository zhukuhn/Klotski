Theme(id: "mechanism", name: "凹陷机关", isPremium: false, productID: nil,
    backgroundColor: CodableColor(color: Color(hex: "#4A5568")), // 酷灰色
    sliderColor: CodableColor(color: Color(hex: "#4A5568")), // 棋子颜色与背景相同，通过阴影区分
    sliderTextColor: CodableColor(color: Color(hex: "#E2E8F0")), // 亮灰色文字
    boardBackgroundColor: CodableColor(color: Color(hex: "#2D3748")), // 深灰色棋盘
    boardGridLineColor: CodableColor(color: .clear), // 不需要网格线
    fontName: "AvenirNext-Bold",
    colorScheme: .dark),


struct MechanismThemeRenderer: ThemeableViewFactory {
    private let theme: Theme = AppThemeRepository.allThemes.first { $0.id == "mechanism" }!

    func gameBackground() -> any View {
        ZStack {
            // 后备的纯色背景，以防图片加载失败
            theme.backgroundColor.color.ignoresSafeArea()

            // 移除所有不必要的颜色遮罩，保持图片原始色彩
            Image("mechanism_background")
                .resizable()
                .aspectRatio(contentMode: .fill)
                .frame(minWidth: 0, maxWidth: .infinity, minHeight: 0, maxHeight: .infinity)
                .clipped()
                .ignoresSafeArea()
        }
    }
    
    func boardBackground(widthCells: Int, heightCells: Int, cellSize: CGFloat) -> any View {
        let shape = RoundedRectangle(cornerRadius: 20, style: .continuous)
        return shape
            .fill(theme.boardBackgroundColor.color.opacity(0.8))
            .overlay(
                shape
                    .stroke(Color.black.opacity(0.4), lineWidth: 8)
                    .blur(radius: 6)
                    .offset(x: 4, y: 4)
                    .mask(shape)
            )
            .overlay(
                shape
                    .stroke(Color.white.opacity(0.1), lineWidth: 8)
                    .blur(radius: 6)
                    .offset(x: -4, y: -4)
                    .mask(shape)
            )
    }

    func pieceView(for piece: Piece, cellSize: CGFloat, isDragging: Bool) -> any View {
        let shape = RoundedRectangle(cornerRadius: cellSize * 0.15, style: .continuous)
        
        ZStack {
            shape
                .fill(theme.sliderColor.color)
                .shadow(color: Color.white.opacity(0.15), radius: isDragging ? 6 : 4, x: isDragging ? -4 : -2, y: isDragging ? -4 : -2)
                .shadow(color: Color.black.opacity(0.4), radius: isDragging ? 6 : 4, x: isDragging ? 4 : 2, y: isDragging ? 4 : 2)
            
            Text(piece.type.displayName)
                .font(.custom(theme.fontName!, size: max(14, cellSize * 0.5)))
                .foregroundColor(theme.sliderTextColor.color)
        }
        .scaleEffect(isDragging ? 1.05 : 1.0)
        .animation(.spring(response: 0.3, dampingFraction: 0.6), value: isDragging)
    }


    func menuButtonStyle() -> AnyButtonStyle {
        AnyButtonStyle(MechanismButtonStyle(theme: theme))
    }
}

struct MechanismButtonStyle: ButtonStyle {
    let theme: Theme

    func makeBody(configuration: Configuration) -> some View {
        let isPressed = configuration.isPressed
        
        configuration.label
            .font(.custom(theme.fontName ?? "AvenirNext-Bold", size: 18))
            .foregroundColor(theme.sliderTextColor.color)
            .padding()
            .frame(maxWidth: 280, minHeight: 50)
            .background(
                // 按下时，浮现一个带有内阴影的玻璃材质背景
                ZStack {
                    Capsule()
                        // 使用 .ultraThinMaterial 会模糊其下方的背景图片，产生磨砂玻璃效果
                        .fill(.ultraThinMaterial)
                    
                    Capsule()
                        // 叠加内阴影，营造“凹陷”感
                        .stroke(Color.black.opacity(0.4), lineWidth: 4)
                        .blur(radius: 4)
                        .offset(x: 2, y: 2)
                        .mask(Capsule())
                    
                    Capsule()
                        .stroke(Color.white.opacity(0.1), lineWidth: 4)
                        .blur(radius: 4)
                        .offset(x: -2, y: -2)
                        .mask(Capsule())
                }
                // 通过透明度来控制整个凹陷效果的显示和隐藏
                .opacity(isPressed ? 1 : 0)
            )
            .offset(y: isPressed ? 1 : 0) // 按下时文字轻微下移，增强沉浸感
            .animation(.spring(response: 0.2, dampingFraction: 0.7), value: isPressed)
    }
}
Theme(id: "mechanism", name: "凹陷机关", isPremium: false, productID: nil,
    backgroundColor: CodableColor(color: Color(hex: "#1A202C")), // 更深的背景色增强对比
    sliderColor: CodableColor(color: Color(hex: "#2D3748")), // 增加深度层次
    sliderTextColor: CodableColor(color: Color(hex: "#CBD5E0")), // 更亮的文字增强可读性
    boardBackgroundColor: CodableColor(color: Color(hex: "#1A202C")), // 与背景一致
    boardGridLineColor: CodableColor(color: .clear),
    fontName: "AvenirNext-DemiBold", // 更轻量级的字体
    colorScheme: .dark),

struct MechanismThemeRenderer: ThemeableViewFactory {
    private let theme: Theme = AppThemeRepository.allThemes.first { $0.id == "mechanism" }!

    func gameBackground() -> any View {
        ZStack {
            // 使用金属质感的渐变背景
            LinearGradient(
                gradient: Gradient(colors: [
                    Color(hex: "#1A202C"),
                    Color(hex: "#2D3748"),
                    Color(hex: "#1A202C")
                ]),
                startPoint: .top,
                endPoint: .bottom
            )
            .ignoresSafeArea()
            
            // 添加精细的机械纹理
            GeometryReader { geometry in
                Path { path in
                    // 创建网格线
                    for x in stride(from: 0, to: geometry.size.width, by: 20) {
                        path.move(to: CGPoint(x: x, y: 0))
                        path.addLine(to: CGPoint(x: x, y: geometry.size.height))
                    }
                    for y in stride(from: 0, to: geometry.size.height, by: 20) {
                        path.move(to: CGPoint(x: 0, y: y))
                        path.addLine(to: CGPoint(x: geometry.size.width, y: y))
                    }
                }
                .stroke(Color(hex: "#2D3748").opacity(0.3), lineWidth: 0.5)
                
                // 添加铆钉细节
                ForEach(0..<30, id: \.self) { _ in
                    Circle()
                        .frame(width: 4, height: 4)
                        .foregroundColor(Color(hex: "#718096"))
                        .position(
                            x: CGFloat.random(in: 0..<geometry.size.width),
                            y: CGFloat.random(in: 0..<geometry.size.height)
                        )
                }
            }
            .blur(radius: 0.5)
        }
    }
    
    func boardBackground(widthCells: Int, heightCells: Int, cellSize: CGFloat) -> any View {
        let shape = RoundedRectangle(cornerRadius: 12, style: .continuous)
        
        return ZStack {
            // 深色基底
            shape.fill(Color(hex: "#1A202C"))
            
            // 强烈的内阴影 - 凹陷效果的核心
            shape
                .fill(
                    LinearGradient(
                        gradient: Gradient(stops: [
                            .init(color: Color(hex: "#1A202C"), location: 0),
                            .init(color: Color(hex: "#1A202C"), location: 0.3),
                            .init(color: Color(hex: "#0D121B"), location: 0.7),
                            .init(color: Color(hex: "#0D121B"), location: 1.0)
                        ]),
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    )
                )
                .shadow(color: .black.opacity(0.8), radius: 10, x: 5, y: 5)
                .shadow(color: Color(hex: "#2D3748").opacity(0.3), radius: 10, x: -5, y: -5)
                .mask(shape)
            
            // 边缘高光增强立体感
            shape
                .stroke(
                    LinearGradient(
                        gradient: Gradient(colors: [
                            Color(hex: "#718096").opacity(0.1),
                            Color(hex: "#CBD5E0").opacity(0.2),
                            Color(hex: "#718096").opacity(0.1)
                        ]),
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    ),
                    lineWidth: 1
                )
            
            // 添加精细的网格线
            Path { path in
                for i in 0...widthCells {
                    let x = CGFloat(i) * cellSize
                    path.move(to: CGPoint(x: x, y: 0))
                    path.addLine(to: CGPoint(x: x, y: CGFloat(heightCells) * cellSize))
                }
                for i in 0...heightCells {
                    let y = CGFloat(i) * cellSize
                    path.move(to: CGPoint(x: 0, y: y))
                    path.addLine(to: CGPoint(x: CGFloat(widthCells) * cellSize, y: y))
                }
            }
            .stroke(Color(hex: "#2D3748").opacity(0.5), lineWidth: 0.5)
        }
        .compositingGroup()
    }

    func pieceView(for piece: Piece, cellSize: CGFloat, isDragging: Bool) -> any View {
        let shape = RoundedRectangle(cornerRadius: cellSize * 0.1, style: .continuous)
        let width = CGFloat(piece.width) * cellSize
        let height = CGFloat(piece.height) * cellSize
        
        return ZStack {
            // 底部阴影 - 增强深度感
            shape
                .fill(Color.black.opacity(0.3))
                .offset(x: 3, y: 3)
                .blur(radius: 3)
                .scaleEffect(isDragging ? 1.03 : 1.0)
            
            // 主按钮 - 凸起效果
            shape
                .fill(
                    LinearGradient(
                        gradient: Gradient(stops: [
                            .init(color: theme.sliderColor.color.lighter(by: 0.1), location: 0),
                            .init(color: theme.sliderColor.color, location: 0.4),
                            .init(color: theme.sliderColor.color.darker(by: 0.2), location: 1.0)
                        ]),
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    )
                )
                .overlay(
                    // 顶部高光
                    shape
                        .stroke(
                            LinearGradient(
                                gradient: Gradient(colors: [
                                    Color.white.opacity(0.2),
                                    .clear
                                ]),
                                startPoint: .topLeading,
                                endPoint: .init(x: 0.7, y: 0.7)
                            ),
                            lineWidth: 1
                        )
                )
                .shadow(color: .black.opacity(0.5), radius: isDragging ? 8 : 4, x: 3, y: 3)
                .shadow(color: Color(hex: "#718096").opacity(0.3), radius: isDragging ? 4 : 2, x: -2, y: -2)
            
            // 按钮文字 - 蚀刻效果
            Text(piece.type.displayName)
                .font(.custom(theme.fontName!, size: max(14, min(width, height) * 0.4))
                .foregroundColor(theme.sliderTextColor.color)
                .shadow(color: .black.opacity(0.7), radius: 1, x: 1, y: 1)
                .shadow(color: Color(hex: "#A0AEC0").opacity(0.5), radius: 0.5, x: -0.5, y: -0.5)
        }
        .scaleEffect(isDragging ? 1.05 : 1.0)
        .animation(.spring(response: 0.3, dampingFraction: 0.7), value: isDragging)
    }

    func menuButtonStyle() -> AnyButtonStyle {
        AnyButtonStyle(MechanismButtonStyle(theme: theme))
    }
}

struct MechanismButtonStyle: ButtonStyle {
    let theme: Theme
    
    func makeBody(configuration: Configuration) -> some View {
        let isPressed = configuration.isPressed
        
        return configuration.label
            .font(.custom(theme.fontName ?? "AvenirNext-DemiBold", size: 18))
            .foregroundColor(theme.sliderTextColor.color)
            .padding(.vertical, 12)
            .frame(maxWidth: 220)
            .background(
                ZStack {
                    // 按钮背景 - 凹陷效果
                    Capsule()
                        .fill(
                            LinearGradient(
                                gradient: Gradient(stops: [
                                    .init(color: theme.sliderColor.color.darker(by: 0.3), location: 0),
                                    .init(color: theme.sliderColor.color, location: 0.3),
                                    .init(color: theme.sliderColor.color.darker(by: 0.1), location: 1.0)
                                ]),
                                startPoint: .top,
                                endPoint: .bottom
                            )
                        )
                    
                    // 顶部高光
                    Capsule()
                        .stroke(
                            LinearGradient(
                                gradient: Gradient(colors: [
                                    Color.white.opacity(isPressed ? 0 : 0.1),
                                    .clear
                                ]),
                                startPoint: .top,
                                endPoint: .bottom
                            ),
                            lineWidth: 1
                        )
                    
                    // 底部阴影增强凹陷感
                    Capsule()
                        .stroke(Color.black.opacity(0.5), lineWidth: 1)
                        .offset(y: 1)
                        .blur(radius: 1)
                        .mask(Capsule())
                }
            )
            .overlay(
                // 按下时的凹陷效果
                Capsule()
                    .fill(Color.black.opacity(isPressed ? 0.3 : 0))
                    .shadow(color: .black, radius: isPressed ? 2 : 0, x: 0, y: 2)
            )
            .scaleEffect(isPressed ? 0.97 : 1.0)
            .offset(y: isPressed ? 1 : 0)
            .animation(.interactiveSpring(response: 0.3, dampingFraction: 0.6), value: isPressed)
    }
}

// 颜色扩展方法
extension Color {
    func lighter(by percentage: CGFloat) -> Color {
        let uiColor = UIColor(self)
        var r: CGFloat = 0, g: CGFloat = 0, b: CGFloat = 0, a: CGFloat = 0
        uiColor.getRed(&r, green: &g, blue: &b, alpha: &a)
        
        return Color(
            red: Double(min(r + percentage, 1.0)),
            green: Double(min(g + percentage, 1.0)),
            blue: Double(min(b + percentage, 1.0)),
            opacity: Double(a)
        )
    }
    
    func darker(by percentage: CGFloat) -> Color {
        let uiColor = UIColor(self)
        var r: CGFloat = 0, g: CGFloat = 0, b: CGFloat = 0, a: CGFloat = 0
        uiColor.getRed(&r, green: &g, blue: &b, alpha: &a)
        
        return Color(
            red: Double(max(r - percentage, 0.0)),
            green: Double(max(g - percentage, 0.0)),
            blue: Double(max(b - percentage, 0.0)),
            opacity: Double(a)
        )
    }
}